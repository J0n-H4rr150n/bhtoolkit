{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API for the Bug Bounty Toolkit application.",
        "title": "Toolkit API",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "v1.0.0"
    },
    "host": "localhost:8778",
    "basePath": "/api",
    "paths": {
        "/analyze/jslinks": {
            "post": {
                "description": "(Not Implemented Yet) Accepts JavaScript content (or a reference to a logged JS file) and uses a tool like jsluice to extract potential URLs, paths, and secrets.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analysis"
                ],
                "summary": "Analyze JavaScript for links/endpoints",
                "parameters": [
                    {
                        "description": "Request containing JS content or reference (e.g., http_log_id of a JS response)",
                        "name": "analysis_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/endpoint-instances": {
            "get": {
                "description": "(Not Implemented Yet) Retrieves all logged HTTP requests that match a specific [METHOD] /path combination for a target.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sitemap"
                ],
                "summary": "Get all instances for a specific sitemap endpoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the target",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "HTTP method of the endpoint (e.g., GET, POST)",
                        "name": "method",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Normalized URL path of the endpoint (e.g., /api/users)",
                        "name": "path",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Missing or invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Checks if the API service is up and running.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "/platforms": {
            "get": {
                "description": "Retrieves a list of all platforms, ordered by name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Platforms"
                ],
                "summary": "List all platforms",
                "responses": {
                    "200": {
                        "description": "A list of platforms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Platform"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new platform to the system. The platform name must be unique.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Platforms"
                ],
                "summary": "Create a new platform",
                "parameters": [
                    {
                        "description": "Platform object that needs to be added",
                        "name": "platform",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Platform"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Platform created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Platform"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing name",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Platform with this name already exists",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/relationships/create": {
            "post": {
                "description": "(Not Implemented Yet) Manually links a discovered web page to a discovered API endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mapping"
                ],
                "summary": "Create a page-to-API relationship",
                "parameters": [
                    {
                        "description": "Request body containing web_page_id and api_endpoint_id",
                        "name": "relationship_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scope-rules": {
            "get": {
                "description": "Retrieves all scope rules for a specified target.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scope Rules"
                ],
                "summary": "Get scope rules for a target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the target to fetch rules for",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of scope rules for the target",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ScopeRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid or missing target_id",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Target not found (if target_id does not exist)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new scope rule (in-scope or out-of-scope) to a specified target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scope Rules"
                ],
                "summary": "Add a scope rule to a target",
                "parameters": [
                    {
                        "description": "Scope rule to add. 'target_id' is required. 'id' and 'is_wildcard' are ignored/auto-set by backend.",
                        "name": "rule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ScopeRule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Scope rule created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ScopeRule"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, missing required fields, or invalid target_id/item_type",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Duplicate scope rule",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/scope-rules/{ruleId}": {
            "get": {
                "description": "Handles GET, PUT, DELETE for a specific scope rule by its ID.",
                "tags": [
                    "Scope Rules"
                ],
                "summary": "Scope Rule item operations",
                "responses": {}
            },
            "put": {
                "description": "Handles GET, PUT, DELETE for a specific scope rule by its ID.",
                "tags": [
                    "Scope Rules"
                ],
                "summary": "Scope Rule item operations",
                "responses": {}
            },
            "delete": {
                "description": "Deletes a scope rule by its numeric ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scope Rules"
                ],
                "summary": "Delete a specific scope rule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the scope rule to delete",
                        "name": "ruleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Scope rule deleted successfully"
                    },
                    "400": {
                        "description": "Invalid rule ID format",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Scope rule not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/search/traffic": {
            "get": {
                "description": "(Not Implemented Yet) Searches through the `http_traffic_log` table based on a query string. Searchable fields could include URLs, headers, and bodies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search traffic logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query term",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Optional ID of the target to scope the search to",
                        "name": "target_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Missing query parameter 'q'",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sitemap-endpoints": {
            "get": {
                "description": "(Not Implemented Yet) Retrieves a list of unique [METHOD] /path combinations discovered for a target.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sitemap"
                ],
                "summary": "Get sitemap/unique endpoints for a target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the target",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid or missing target_id",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/target/{identifier}": {
            "get": {
                "description": "Retrieves details for a specific target, including its scope rules.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Targets"
                ],
                "summary": "Get a target by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Numeric ID of the Target",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Target details including scope rules",
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    },
                    "400": {
                        "description": "Invalid target ID format",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a target identified by its numeric ID or string slug.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Targets"
                ],
                "summary": "Delete a target by ID or slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target ID (numeric) or Slug (string)",
                        "name": "identifier",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Target deleted successfully"
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/targets": {
            "get": {
                "description": "Retrieves a list of targets, optionally filtered by platform_id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Targets"
                ],
                "summary": "List targets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Platform ID to filter targets by",
                        "name": "platform_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of targets. Scope rules are not populated in this list view.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Target"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid platform_id parameter",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new target, linking it to a platform and defining its scope.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Targets"
                ],
                "summary": "Create a new target",
                "parameters": [
                    {
                        "description": "Target creation request",
                        "name": "target",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TargetCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Target created successfully, including generated slug and processed scope rules",
                        "schema": {
                            "$ref": "#/definitions/models.Target"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, missing required fields, or invalid platform ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Target with this codename already exists for the platform, or slug conflict",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/targets/by-codename": {
            "delete": {
                "description": "Deletes a target using its codename, scoped to a specific platform.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Targets"
                ],
                "summary": "Delete a target by codename and platform ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Codename of the target",
                        "name": "codename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the platform the target belongs to",
                        "name": "platform_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Target deleted successfully"
                    },
                    "400": {
                        "description": "Missing or invalid codename or platform_id",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Target not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/traffic-log": {
            "get": {
                "description": "(Not Implemented Yet) Retrieves a paginated list of HTTP traffic log entries for a specified target.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Traffic Log"
                ],
                "summary": "Get traffic log entries for a target",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the target to fetch traffic logs for",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid or missing target_id",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/traffic-log/entry/{logId}": {
            "get": {
                "description": "(Not Implemented Yet) Retrieves the full request and response details for a single HTTP traffic log entry by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Traffic Log"
                ],
                "summary": "Get raw details for a specific traffic log entry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the traffic log entry",
                        "name": "logId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid logId",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Log entry not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/visualization": {
            "get": {
                "description": "(Not Implemented Yet) Retrieves the nodes (pages, APIs) and edges (relationships) for a target to be used by a graph visualization library like Cytoscape.js.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Visualization"
                ],
                "summary": "Get data for visualization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the target for which to get visualization data",
                        "name": "target_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid or missing target_id",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented Yet",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Error message describing the issue"
                }
            }
        },
        "models.Platform": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "description": "Unique identifier for the platform.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "name": {
                    "description": "Name of the platform.",
                    "type": "string",
                    "example": "HackerOne"
                }
            }
        },
        "models.ScopeItemRequest": {
            "type": "object",
            "required": [
                "pattern"
            ],
            "properties": {
                "description": {
                    "description": "Optional description for the scope item.",
                    "type": "string",
                    "example": "Main application wildcard"
                },
                "item_type": {
                    "description": "Type of scope item. Auto-detected if not provided.",
                    "type": "string",
                    "example": "domain"
                },
                "pattern": {
                    "description": "The scope pattern (e.g., *.example.com, /api/v1/*).",
                    "type": "string",
                    "example": "*.example.com"
                }
            }
        },
        "models.ScopeRule": {
            "type": "object",
            "required": [
                "is_in_scope",
                "item_type",
                "pattern"
            ],
            "properties": {
                "description": {
                    "description": "Optional description for the scope rule.",
                    "type": "string",
                    "example": "Main application domain"
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 101
                },
                "is_in_scope": {
                    "description": "True if the pattern is in scope, false if out of scope.",
                    "type": "boolean",
                    "example": true
                },
                "is_wildcard": {
                    "description": "True if the pattern contains a wildcard, auto-detected by backend.",
                    "type": "boolean",
                    "example": true
                },
                "item_type": {
                    "description": "Type of scope item.",
                    "type": "string",
                    "example": "domain"
                },
                "pattern": {
                    "description": "The scope pattern.",
                    "type": "string",
                    "example": "*.example.com"
                },
                "target_id": {
                    "description": "ID of the target this rule belongs to.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                }
            }
        },
        "models.Target": {
            "type": "object",
            "properties": {
                "codename": {
                    "type": "string",
                    "example": "Alpha Web App"
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "link": {
                    "type": "string",
                    "format": "url",
                    "example": "https://alpha.example.com"
                },
                "notes": {
                    "type": "string",
                    "example": "Initial notes about the target."
                },
                "platform_id": {
                    "type": "integer",
                    "format": "int64",
                    "example": 1
                },
                "scope_rules": {
                    "description": "Associated scope rules for the target (populated for GET by ID).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScopeRule"
                    }
                },
                "slug": {
                    "type": "string",
                    "example": "alpha-web-app"
                }
            }
        },
        "models.TargetCreateRequest": {
            "type": "object",
            "required": [
                "codename",
                "link",
                "platform_id"
            ],
            "properties": {
                "codename": {
                    "description": "A unique codename for the target within the platform.",
                    "type": "string",
                    "example": "Alpha Web App"
                },
                "in_scope_items": {
                    "description": "List of items that are in scope.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScopeItemRequest"
                    }
                },
                "link": {
                    "description": "Primary URL/link for the target.",
                    "type": "string",
                    "format": "url",
                    "example": "https://alpha.example.com"
                },
                "notes": {
                    "description": "Optional notes for the target.",
                    "type": "string",
                    "example": "Main web application for Alpha project."
                },
                "out_of_scope_items": {
                    "description": "List of items that are out of scope.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ScopeItemRequest"
                    }
                },
                "platform_id": {
                    "description": "ID of the platform this target belongs to.",
                    "type": "integer",
                    "example": 1
                }
            }
        }
    }
}